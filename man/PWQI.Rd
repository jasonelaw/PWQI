% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculatePWQI.R
\name{PWQI}
\alias{PWQI}
\title{Calculate the Portland Water Quality Index
Calculate the Portland Water Quality Index as used in the watershed report cards.
The function is vectorized. Each argument should be the same length, excepting pH which
may be length 1.}
\usage{
PWQI(watershed, Cu, DO, Ecoli, Hg, NH4, P, TSS, Cel, pH = 7.8)
}
\arguments{
\item{watershed}{name of the watershed}

\item{Cu}{dissolved copper concentration in ug / L}

\item{DO}{dissolved oxygen in mg / L}

\item{Ecoli}{E. coli concentration in 1 / 100 mL}

\item{Hg}{total mercury concentration in ug / L}

\item{NH4}{ammonia-nitrogen concentration in mg / L}

\item{P}{phosphorus concentration in mg / L}

\item{TSS}{total suspended solids concentration in mg / L}

\item{Cel}{temperature in Celsius}

\item{pH}{pH}
}
\value{
A data.frame of water quality index subindices and the overall index.
}
\description{
The PWQI uses cubic polynomials to map subindex raw values to subindex scores, which are supposed to range from 10 - 100.
However, the polynomials extend beyond the subindex range for allowable values of the raw data (e.g, the value of the
copper polynomial at 0 is 102.17). This means that a lot of senseless acrobatics is necessary to constrain the index
between 10 - 100. Unfortunately, we can't do this by just constraining the output; the functions are cubic polynomials
so can start going back DOWN for high values of the raw data (e.g., for copper 7 is index 10.89, but at 7.5 is index 7.97)
Thus, we have to constrain both the input and the output. I do this by solving for the roots at 10 and 100, and constraining
the input to be between the roots, then constrain the output to 10, 100 to remove numerical spill-over at 10 or 100.
}
\details{
There are several watersheds that have special subindex scoring functions for certain paraters. The Columbia River, Willamette River,
and Columbia Slough have a separate dissolved oxygen function. The Fanno Watershed has a separate phosphorus function. The
Willamette and Columbia have their own temperature function. Finally, the Willamette has its own mercury function.
}
\examples{

kParameters <- c('Dissolved Copper' = 'Cu', 'Dissolved Oxygen' = 'DO', 'E. coli' = 'Ecoli',
'Total Mercury' = 'Hg', 'Ammonia' = 'NH4',
'Total Phosphorus' = 'P', 'Total Suspended Solids' = 'TSS', 'Temperature' = 'Cel')
kWatersheds <- c('Fanno Creek', 'Johnson Creek', 'Tualatin Tributaries', 'Tryon Creek',
'Willamette River Tributaries', 'Columbia River', 'Columbia Slough', 'Willamette River')

kTestVals <- c(1.783, 6.1, 108, 5.142, 0.284, 0.259, 38, 18.5)
d <- matrix(kTestVals, dimnames = list(NULL, kParameters), ncol = length(kTestVals), nrow = 8, byrow=T)
d <- as.data.frame(d)
d$watershed <- kWatersheds

with(d, PWQI(watershed, Cu, DO, Ecoli, Hg, NH4, P, TSS, Cel))
PWQI(watershed = 'Tryon Creek', Cu = 7.2, TSS = 98, Ecoli = 1596, NH4 = 2.25, DO = 3, P = 0.61, Cel = 27, Hg = 9.1)
PWQI(watershed = 'Tryon Creek', Cu = 0.05, TSS = 1, Ecoli = 9, NH4 = 0, DO = 12, P = 0.008, Cel = 5, Hg = 0)
}
